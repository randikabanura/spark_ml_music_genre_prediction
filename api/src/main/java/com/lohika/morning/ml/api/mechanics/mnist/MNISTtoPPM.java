package com.lohika.morning.ml.api.mechanics.mnist;//------------------------------------------------------------
//   File: MNISTtoPPM.java
//   Written for JDK 1.1 API 
//   Author: Douglas Eck  deck@unm.edu
//   Description:
//   This is a simple program which takes an MNIST image file, 
//   an MNIST label file, and a desired image number and 
//   prints that image to stdout as a ppm file. It also prints
//   the number that the file is supposed to represent to 
//   stderr.
//------------------------------------------------------------

import java.awt.image.BufferedImage;
import java.io.*;
import java.nio.file.Paths;


public class MNISTtoPPM extends Object {
  public static void main(String [] args ) throws IOException {
    MNISTImageFile imgF = null;
    MNISTLabelFile lblF = null;
    if (args.length!=3) {
      System.err.println("MNISTtoPPM syntax: MNISTtoPPM <MNIST image file name> <MNIST label file name> <img offset>");
      System.exit(0);
    } else {
      try {
	imgF = new MNISTImageFile(args[0],"r");
	lblF = new MNISTLabelFile(args[1],"r");
      } catch (FileNotFoundException e) { 
	System.err.println("File not found: " + e);
	System.exit(0);
      } catch (IOException e) {
	System.err.println("IO Exception: " + e);
	System.exit(0);
      }
      for (int i=1; i<10000; i++) {
        imgF.setCurr(i);
        lblF.setCurr(i);
        printPPMToStdOut(imgF, lblF);
      }
    }
  }

  public static void printPPMToStdOut(MNISTImageFile imgF, MNISTLabelFile lblF) throws IOException {
    //Prints to stdout the ppm file of selected image (per ppm format in man ppm) 
//    int [][] dat = imgF.data();
//    System.out.println("P3");
//    System.out.println(""+ imgF.rows() + " " + imgF.cols() + " 255");
//    System.out.println("# autogenerated by MNISTtoPPM");
//    System.out.println("# this was drawn as a " + lblF.data());
//    System.out.println("# " + imgF.name());
//    System.out.println("# " + imgF.status());
//
//    int[] pixels = new int[imgF.cols * imgF.rows];
//    int k = 0;
//
//    for (int i=0;i<imgF.rows();i++) {
//      for(int j=0;j<imgF.cols();j++)
//        pixels[k++] = dat[i][j];
//    }
//
//    BufferedImage image = getImageFromArray(pixels, imgF.cols, imgF.rows);
//
//    ImageIO.write(image, "jpg", Paths.get("/Users/tmatyashovsky/Desktop/test.jpg").toFile());

    try (PrintWriter out =  new PrintWriter(new BufferedWriter(new FileWriter(Paths.get("/Users/tmatyashovsky/Desktop").resolve("test.csv").toFile(), true)))) {
      out.print(lblF.data());

      int [][] dat = imgF.data();
      for (int i=0;i<imgF.rows();i++) {
        for (int j = 0; j < imgF.cols(); j++) {
          out.print(",");
          out.print(dat[i][j]);
        }
      }
      out.println("");
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  public static BufferedImage getImageFromArray(int[] pixels, int width, int height) {
    BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
    image.setRGB(0, 0, width, height, pixels, 0, width);
    return image;
  }
}





